package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_binary",
     "ocaml_exec_module",
     "ocaml_module",
     "ocaml_test",
)

load("@rules_jsoo//build:rules.bzl", "jsoo_binary", "jsoo_library")

load("@aspect_rules_js//js:defs.bzl",
     "js_binary", "js_run_binary", "js_library", "js_test")

load("//test/e2e/alcotest:BUILD.bzl", "make_tests")

DEPS_1 = [
    "@opam_alcotest//lib/alcotest",
    "@opam_alcotest//lib/stdlib_ext",
    "@opam_alcotest//lib/engine"
]

make_tests(
    tests = {
        "bail": "",
        "check_basic": "",
        "check_located": "",
        "check_long": "",
        "compact": "",
        "duplicate_test_names": "",
        "empty_suite_name": "",
        "exception_in_test": "",
        "filter_all_tests": "test bar 1",
        "invalid_arg_in_test": "",
        "long_test_case_name": "",
        "outside_runner": "",
        "tail_errors_limit": "",
        "tail_errors_unlimited": "",
        "unknown_option": "--dry-runn"
    }
)

##############################
####  Executable Targets  ####
#############
js_binary(
    name        = "bail.bc.js",
    entry_point = ":bail.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "bail.exe.jsoo",
    main   = ":bail.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "bail.exe",
    main     = ":Bail",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Bail",
    struct        = "bail.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "check_basic.bc.js",
    entry_point = ":check_basic.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "check_basic.exe.jsoo",
    main   = ":check_basic.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "check_basic.exe",
    main     = ":Check_basic",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Check_basic",
    struct        = "check_basic.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "check_located.bc.js",
    entry_point = ":check_located.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "check_located.exe.jsoo",
    main   = ":check_located.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "check_located.exe",
    main     = ":Check_located",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Check_located",
    struct        = "check_located.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "check_long.bc.js",
    entry_point = ":check_long.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "check_long.exe.jsoo",
    main   = ":check_long.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "check_long.exe",
    main     = ":Check_long",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Check_long",
    struct        = "check_long.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "compact.bc.js",
    entry_point = ":compact.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "compact.exe.jsoo",
    main   = ":compact.exe",
    visibility = ["//visibility:public"],
)

########
# sh_test(
#     name = "compact_test",
#     srcs = ["test_runner.sh"],
#     args = [
#         "compact",
#         "$(rootpath :compact.exe)",
#         "$(rootpath //test/e2e:strip_randomness.exe)",
#         "$(rootpath :compact.expected)"
#     ],
#     data = [
#         ":compact.exe",
#         "//test/e2e:strip_randomness.exe",
#         ":compact.expected"
#     ]
# )

ocaml_binary(
    name     = "compact.exe",
    main     = ":Compact",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Compact",
    struct        = "compact.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "duplicate_test_names.bc.js",
    entry_point = ":duplicate_test_names.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "duplicate_test_names.exe.jsoo",
    main   = ":duplicate_test_names.exe",
    visibility = ["//visibility:public"],
)

########
# sh_test(
#     name = "duplicate_test_names_test",
#     srcs = ["test_runner.sh"],
#     args = [
#         "duplicate_test_names",
#         "$(rootpath :duplicate_test_names.exe)",
#         "$(rootpath //test/e2e:strip_randomness.exe)",
#         "$(rootpath :duplicate_test_names.expected)"
#     ],
#     data = [
#         ":duplicate_test_names.exe",
#         "//test/e2e:strip_randomness.exe",
#         ":duplicate_test_names.expected"
#     ]
# )

ocaml_binary(
    name     = "duplicate_test_names.exe",
    main     = ":Duplicate_test_names",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Duplicate_test_names",
    struct        = "duplicate_test_names.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "empty_suite_name.bc.js",
    entry_point = ":empty_suite_name.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "empty_suite_name.exe.jsoo",
    main   = ":empty_suite_name.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "empty_suite_name.exe",
    main     = ":Empty_suite_name",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Empty_suite_name",
    struct        = "empty_suite_name.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "exception_in_test.bc.js",
    entry_point = ":exception_in_test.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "exception_in_test.exe.jsoo",
    main   = ":exception_in_test.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "exception_in_test.exe",
    main     = ":Exception_in_test",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Exception_in_test",
    struct        = "exception_in_test.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "filter_all_tests.bc.js",
    entry_point = ":filter_all_tests.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "filter_all_tests.exe.jsoo",
    main   = ":filter_all_tests.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "filter_all_tests.exe",
    main     = ":Filter_all_tests",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Filter_all_tests",
    struct        = "filter_all_tests.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "invalid_arg_in_test.bc.js",
    entry_point = ":invalid_arg_in_test.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "invalid_arg_in_test.exe.jsoo",
    main   = ":invalid_arg_in_test.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "invalid_arg_in_test.exe",
    main     = ":Invalid_arg_in_test",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Invalid_arg_in_test",
    struct        = "invalid_arg_in_test.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "long_test_case_name.bc.js",
    entry_point = ":long_test_case_name.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "long_test_case_name.exe.jsoo",
    main   = ":long_test_case_name.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "long_test_case_name.exe",
    main     = ":Long_test_case_name",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Long_test_case_name",
    struct        = "long_test_case_name.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "outside_runner.bc.js",
    entry_point = ":outside_runner.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "outside_runner.exe.jsoo",
    main   = ":outside_runner.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "outside_runner.exe",
    main     = ":Outside_runner",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Outside_runner",
    struct        = "outside_runner.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "tail_errors_limit.bc.js",
    entry_point = ":tail_errors_limit.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "tail_errors_limit.exe.jsoo",
    main   = ":tail_errors_limit.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "tail_errors_limit.exe",
    main     = ":Tail_errors_limit",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Tail_errors_limit",
    struct        = "tail_errors_limit.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "tail_errors_unlimited.bc.js",
    entry_point = ":tail_errors_unlimited.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "tail_errors_unlimited.exe.jsoo",
    main   = ":tail_errors_unlimited.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "tail_errors_unlimited.exe",
    main     = ":Tail_errors_unlimited",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Tail_errors_unlimited",
    struct        = "tail_errors_unlimited.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "unknown_option.bc.js",
    entry_point = ":unknown_option.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "unknown_option.exe.jsoo",
    main   = ":unknown_option.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "unknown_option.exe",
    main     = ":Unknown_option",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Unknown_option",
    struct        = "unknown_option.ml",
    deps          = DEPS_1,
)
