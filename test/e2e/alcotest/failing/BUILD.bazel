package(default_visibility = ["//visibility:public"])

load("@rules_ocaml//build:rules.bzl",
     "ocaml_binary",
     "ocaml_exec_module",
     "ocaml_module",
     "ocaml_test",
)

load("@rules_jsoo//build:rules.bzl", "jsoo_binary", "jsoo_library")

load("@aspect_rules_js//js:defs.bzl",
     "js_binary", "js_run_binary", "js_library", "js_test")

load(":BUILD.bzl", "make_tests")

DEPS_1 = [
    "@opam_alcotest//lib/alcotest",
    "@opam_alcotest//lib/stdlib_ext",
    "@opam_alcotest//lib/engine"
]

make_tests(
    tests = [
        "bail",
        "check_basic",
        "check_located",
        "check_long",
        "empty_suite_name",
        # "exception_in_test",
        # "filter_all_tests",
        "invalid_arg_in_test",
        "long_test_case_name",
        "outside_runner",
        "tail_errors_limit",
        "tail_errors_unlimited",
        # "unknown_option"
    ]
)

##############################
####  Executable Targets  ####
#############
js_binary(
    name        = "bail.bc.js",
    entry_point = ":bail.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "bail.exe.jsoo",
    main   = ":bail.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "bail.exe",
    main     = ":Bail",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Bail",
    struct        = "bail.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "check_basic.bc.js",
    entry_point = ":check_basic.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "check_basic.exe.jsoo",
    main   = ":check_basic.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "check_basic.exe",
    main     = ":Check_basic",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Check_basic",
    struct        = "check_basic.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "check_located.bc.js",
    entry_point = ":check_located.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "check_located.exe.jsoo",
    main   = ":check_located.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "check_located.exe",
    main     = ":Check_located",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Check_located",
    struct        = "check_located.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "check_long.bc.js",
    entry_point = ":check_long.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "check_long.exe.jsoo",
    main   = ":check_long.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "check_long.exe",
    main     = ":Check_long",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Check_long",
    struct        = "check_long.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "compact.bc.js",
    entry_point = ":compact.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "compact.exe.jsoo",
    main   = ":compact.exe",
    visibility = ["//visibility:public"],
)

########
sh_test(
    name = "compact_test",
    srcs = ["test_runner.sh"],
    args = [
        "compact",
        "$(rootpath :compact.exe)",
        "$(rootpath //test/e2e:strip_randomness.exe)",
        "$(rootpath :compact.expected)"
    ],
    data = [
        ":compact.exe",
        "//test/e2e:strip_randomness.exe",
        ":compact.expected"
    ]
)

ocaml_binary(
    name     = "compact.exe",
    main     = ":Compact",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Compact",
    struct        = "compact.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "duplicate_test_names.bc.js",
    entry_point = ":duplicate_test_names.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "duplicate_test_names.exe.jsoo",
    main   = ":duplicate_test_names.exe",
    visibility = ["//visibility:public"],
)

########
sh_test(
    name = "duplicate_test_names_test",
    srcs = ["test_runner.sh"],
    args = [
        "duplicate_test_names",
        "$(rootpath :duplicate_test_names.exe)",
        "$(rootpath //test/e2e:strip_randomness.exe)",
        "$(rootpath :duplicate_test_names.expected)"
    ],
    data = [
        ":duplicate_test_names.exe",
        "//test/e2e:strip_randomness.exe",
        ":duplicate_test_names.expected"
    ]
)

ocaml_binary(
    name     = "duplicate_test_names.exe",
    main     = ":Duplicate_test_names",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Duplicate_test_names",
    struct        = "duplicate_test_names.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "empty_suite_name.bc.js",
    entry_point = ":empty_suite_name.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "empty_suite_name.exe.jsoo",
    main   = ":empty_suite_name.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "empty_suite_name.exe",
    main     = ":Empty_suite_name",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Empty_suite_name",
    struct        = "empty_suite_name.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "exception_in_test.bc.js",
    entry_point = ":exception_in_test.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "exception_in_test.exe.jsoo",
    main   = ":exception_in_test.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "exception_in_test.exe",
    main     = ":Exception_in_test",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Exception_in_test",
    struct        = "exception_in_test.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "filter_all_tests.bc.js",
    entry_point = ":filter_all_tests.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "filter_all_tests.exe.jsoo",
    main   = ":filter_all_tests.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "filter_all_tests.exe",
    main     = ":Filter_all_tests",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Filter_all_tests",
    struct        = "filter_all_tests.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "invalid_arg_in_test.bc.js",
    entry_point = ":invalid_arg_in_test.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "invalid_arg_in_test.exe.jsoo",
    main   = ":invalid_arg_in_test.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "invalid_arg_in_test.exe",
    main     = ":Invalid_arg_in_test",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Invalid_arg_in_test",
    struct        = "invalid_arg_in_test.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "long_test_case_name.bc.js",
    entry_point = ":long_test_case_name.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "long_test_case_name.exe.jsoo",
    main   = ":long_test_case_name.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "long_test_case_name.exe",
    main     = ":Long_test_case_name",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Long_test_case_name",
    struct        = "long_test_case_name.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "outside_runner.bc.js",
    entry_point = ":outside_runner.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "outside_runner.exe.jsoo",
    main   = ":outside_runner.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "outside_runner.exe",
    main     = ":Outside_runner",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Outside_runner",
    struct        = "outside_runner.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "tail_errors_limit.bc.js",
    entry_point = ":tail_errors_limit.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "tail_errors_limit.exe.jsoo",
    main   = ":tail_errors_limit.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "tail_errors_limit.exe",
    main     = ":Tail_errors_limit",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Tail_errors_limit",
    struct        = "tail_errors_limit.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "tail_errors_unlimited.bc.js",
    entry_point = ":tail_errors_unlimited.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "tail_errors_unlimited.exe.jsoo",
    main   = ":tail_errors_unlimited.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "tail_errors_unlimited.exe",
    main     = ":Tail_errors_unlimited",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Tail_errors_unlimited",
    struct        = "tail_errors_unlimited.ml",
    deps          = DEPS_1,
)

#############
js_binary(
    name        = "unknown_option.bc.js",
    entry_point = ":unknown_option.exe.jsoo",
    visibility  = ["//visibility:public"],
)

jsoo_binary(
    name     = "unknown_option.exe.jsoo",
    main   = ":unknown_option.exe",
    visibility = ["//visibility:public"],
)

ocaml_binary(
    name     = "unknown_option.exe",
    main     = ":Unknown_option",
    visibility = ["//visibility:public"],
)

ocaml_exec_module(
    name          = "Unknown_option",
    struct        = "unknown_option.ml",
    deps          = DEPS_1,
)

######################## Modules & Signatures ########################
############################# Rules ##################################

# ########
# genrule(
#     outs  = [
#         "bail.actual"
#     ],
#     name  = "__bail.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:bail.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:bail.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "bail.processed"
#     ],
#     name  = "__bail.processed__",
#     srcs  = [
#         ":bail.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :bail.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "bail.processed.diff_test",
#     file1  = ":bail.processed",
#     file2  = ":bail.expected"
# )

# ##############
# js_run_binary(
#     name  = "__bail-js.actual__",
#     tool  = ":bail.bc.js",
#     stdout  = "bail-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "bail-js.processed"
#     ],
#     name  = "__bail-js.processed__",
#     srcs  = [
#         ":bail-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :bail-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "bail-js.processed.diff_test",
#     file1  = ":bail-js.processed",
#     file2  = ":bail-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "check_basic.actual"
#     ],
#     name  = "__check_basic.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:check_basic.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:check_basic.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "check_basic.processed"
#     ],
#     name  = "__check_basic.processed__",
#     srcs  = [
#         ":check_basic.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :check_basic.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "check_basic.processed.diff_test",
#     file1  = ":check_basic.processed",
#     file2  = ":check_basic.expected"
# )

# ##############
# js_run_binary(
#     name  = "__check_basic-js.actual__",
#     tool  = ":check_basic.bc.js",
#     stdout  = "check_basic-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "check_basic-js.processed"
#     ],
#     name  = "__check_basic-js.processed__",
#     srcs  = [
#         ":check_basic-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :check_basic-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "check_basic-js.processed.diff_test",
#     file1  = ":check_basic-js.processed",
#     file2  = ":check_basic-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "check_located.actual"
#     ],
#     name  = "__check_located.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:check_located.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:check_located.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "check_located.processed"
#     ],
#     name  = "__check_located.processed__",
#     srcs  = [
#         ":check_located.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :check_located.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "check_located.processed.diff_test",
#     file1  = ":check_located.processed",
#     file2  = ":check_located.expected"
# )

# ##############
# js_run_binary(
#     name  = "__check_located-js.actual__",
#     tool  = ":check_located.bc.js",
#     stdout  = "check_located-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "check_located-js.processed"
#     ],
#     name  = "__check_located-js.processed__",
#     srcs  = [
#         ":check_located-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :check_located-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "check_located-js.processed.diff_test",
#     file1  = ":check_located-js.processed",
#     file2  = ":check_located-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "check_long.actual"
#     ],
#     name  = "__check_long.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:check_long.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:check_long.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "check_long.processed"
#     ],
#     name  = "__check_long.processed__",
#     srcs  = [
#         ":check_long.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :check_long.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "check_long.processed.diff_test",
#     file1  = ":check_long.processed",
#     file2  = ":check_long.expected"
# )

# ##############
# js_run_binary(
#     name  = "__check_long-js.actual__",
#     tool  = ":check_long.bc.js",
#     stdout  = "check_long-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "check_long-js.processed"
#     ],
#     name  = "__check_long-js.processed__",
#     srcs  = [
#         ":check_long-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :check_long-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "check_long-js.processed.diff_test",
#     file1  = ":check_long-js.processed",
#     file2  = ":check_long-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "compact.actual"
#     ],
#     name  = "__compact.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:compact.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:compact.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "compact.processed"
#     ],
#     name  = "__compact.processed__",
#     srcs  = [
#         ":compact.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :compact.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "compact.processed.diff_test",
#     file1  = ":compact.processed",
#     file2  = ":compact.expected"
# )

# ##############
# js_run_binary(
#     name  = "__compact-js.actual__",
#     tool  = ":compact.bc.js",
#     stdout  = "compact-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "compact-js.processed"
#     ],
#     name  = "__compact-js.processed__",
#     srcs  = [
#         ":compact-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :compact-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "compact-js.processed.diff_test",
#     file1  = ":compact-js.processed",
#     file2  = ":compact-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "duplicate_test_names.actual"
#     ],
#     name  = "__duplicate_test_names.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:duplicate_test_names.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:duplicate_test_names.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "duplicate_test_names.processed"
#     ],
#     name  = "__duplicate_test_names.processed__",
#     srcs  = [
#         ":duplicate_test_names.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :duplicate_test_names.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "duplicate_test_names.processed.diff_test",
#     file1  = ":duplicate_test_names.processed",
#     file2  = ":duplicate_test_names.expected"
# )

# ##############
# js_run_binary(
#     name  = "__duplicate_test_names-js.actual__",
#     tool  = ":duplicate_test_names.bc.js",
#     stdout  = "duplicate_test_names-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "duplicate_test_names-js.processed"
#     ],
#     name  = "__duplicate_test_names-js.processed__",
#     srcs  = [
#         ":duplicate_test_names-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :duplicate_test_names-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "duplicate_test_names-js.processed.diff_test",
#     file1  = ":duplicate_test_names-js.processed",
#     file2  = ":duplicate_test_names-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "empty_suite_name.actual"
#     ],
#     name  = "__empty_suite_name.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:empty_suite_name.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:empty_suite_name.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "empty_suite_name.processed"
#     ],
#     name  = "__empty_suite_name.processed__",
#     srcs  = [
#         ":empty_suite_name.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :empty_suite_name.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "empty_suite_name.processed.diff_test",
#     file1  = ":empty_suite_name.processed",
#     file2  = ":empty_suite_name.expected"
# )

# ##############
# js_run_binary(
#     name  = "__empty_suite_name-js.actual__",
#     tool  = ":empty_suite_name.bc.js",
#     stdout  = "empty_suite_name-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "empty_suite_name-js.processed"
#     ],
#     name  = "__empty_suite_name-js.processed__",
#     srcs  = [
#         ":empty_suite_name-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :empty_suite_name-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "empty_suite_name-js.processed.diff_test",
#     file1  = ":empty_suite_name-js.processed",
#     file2  = ":empty_suite_name-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "exception_in_test.actual"
#     ],
#     name  = "__exception_in_test.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:exception_in_test.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:exception_in_test.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "exception_in_test.processed"
#     ],
#     name  = "__exception_in_test.processed__",
#     srcs  = [
#         ":exception_in_test.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :exception_in_test.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "exception_in_test.processed.diff_test",
#     file1  = ":exception_in_test.processed",
#     file2  = ":exception_in_test.expected"
# )

# ##############
# js_run_binary(
#     name  = "__exception_in_test-js.actual__",
#     tool  = ":exception_in_test.bc.js",
#     stdout  = "exception_in_test-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "exception_in_test-js.processed"
#     ],
#     name  = "__exception_in_test-js.processed__",
#     srcs  = [
#         ":exception_in_test-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :exception_in_test-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "exception_in_test-js.processed.diff_test",
#     file1  = ":exception_in_test-js.processed",
#     file2  = ":exception_in_test-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "filter_all_tests.actual"
#     ],
#     name  = "__filter_all_tests.actual__",
#     srcs  = [
#         ":bar",
#         ":test"
#     ],
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:filter_all_tests.exe)",
#         "$(location :test)",
#         "$(location :bar)",
#         "1",
#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:filter_all_tests.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "filter_all_tests.processed"
#     ],
#     name  = "__filter_all_tests.processed__",
#     srcs  = [
#         ":filter_all_tests.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :filter_all_tests.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "filter_all_tests.processed.diff_test",
#     file1  = ":filter_all_tests.processed",
#     file2  = ":filter_all_tests.expected"
# )

# ##############
# js_run_binary(
#     name  = "__filter_all_tests-js.actual__",
#     tool  = ":filter_all_tests.bc.js",
#     stdout  = "filter_all_tests-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "filter_all_tests-js.processed"
#     ],
#     name  = "__filter_all_tests-js.processed__",
#     srcs  = [
#         ":filter_all_tests-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :filter_all_tests-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "filter_all_tests-js.processed.diff_test",
#     file1  = ":filter_all_tests-js.processed",
#     file2  = ":filter_all_tests-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "invalid_arg_in_test.actual"
#     ],
#     name  = "__invalid_arg_in_test.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:invalid_arg_in_test.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:invalid_arg_in_test.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "invalid_arg_in_test.processed"
#     ],
#     name  = "__invalid_arg_in_test.processed__",
#     srcs  = [
#         ":invalid_arg_in_test.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :invalid_arg_in_test.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "invalid_arg_in_test.processed.diff_test",
#     file1  = ":invalid_arg_in_test.processed",
#     file2  = ":invalid_arg_in_test.expected"
# )

# ##############
# js_run_binary(
#     name  = "__invalid_arg_in_test-js.actual__",
#     tool  = ":invalid_arg_in_test.bc.js",
#     stdout  = "invalid_arg_in_test-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "invalid_arg_in_test-js.processed"
#     ],
#     name  = "__invalid_arg_in_test-js.processed__",
#     srcs  = [
#         ":invalid_arg_in_test-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :invalid_arg_in_test-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "invalid_arg_in_test-js.processed.diff_test",
#     file1  = ":invalid_arg_in_test-js.processed",
#     file2  = ":invalid_arg_in_test-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "long_test_case_name.actual"
#     ],
#     name  = "__long_test_case_name.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:long_test_case_name.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:long_test_case_name.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "long_test_case_name.processed"
#     ],
#     name  = "__long_test_case_name.processed__",
#     srcs  = [
#         ":long_test_case_name.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :long_test_case_name.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "long_test_case_name.processed.diff_test",
#     file1  = ":long_test_case_name.processed",
#     file2  = ":long_test_case_name.expected"
# )

# ##############
# js_run_binary(
#     name  = "__long_test_case_name-js.actual__",
#     tool  = ":long_test_case_name.bc.js",
#     stdout  = "long_test_case_name-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "long_test_case_name-js.processed"
#     ],
#     name  = "__long_test_case_name-js.processed__",
#     srcs  = [
#         ":long_test_case_name-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :long_test_case_name-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "long_test_case_name-js.processed.diff_test",
#     file1  = ":long_test_case_name-js.processed",
#     file2  = ":long_test_case_name-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "outside_runner.actual"
#     ],
#     name  = "__outside_runner.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:outside_runner.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:outside_runner.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "outside_runner.processed"
#     ],
#     name  = "__outside_runner.processed__",
#     srcs  = [
#         ":outside_runner.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :outside_runner.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "outside_runner.processed.diff_test",
#     file1  = ":outside_runner.processed",
#     file2  = ":outside_runner.expected"
# )

# ##############
# js_run_binary(
#     name  = "__outside_runner-js.actual__",
#     tool  = ":outside_runner.bc.js",
#     stdout  = "outside_runner-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "outside_runner-js.processed"
#     ],
#     name  = "__outside_runner-js.processed__",
#     srcs  = [
#         ":outside_runner-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :outside_runner-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "outside_runner-js.processed.diff_test",
#     file1  = ":outside_runner-js.processed",
#     file2  = ":outside_runner-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "tail_errors_limit.actual"
#     ],
#     name  = "__tail_errors_limit.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:tail_errors_limit.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:tail_errors_limit.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "tail_errors_limit.processed"
#     ],
#     name  = "__tail_errors_limit.processed__",
#     srcs  = [
#         ":tail_errors_limit.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :tail_errors_limit.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "tail_errors_limit.processed.diff_test",
#     file1  = ":tail_errors_limit.processed",
#     file2  = ":tail_errors_limit.expected"
# )

# ##############
# js_run_binary(
#     name  = "__tail_errors_limit-js.actual__",
#     tool  = ":tail_errors_limit.bc.js",
#     stdout  = "tail_errors_limit-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "tail_errors_limit-js.processed"
#     ],
#     name  = "__tail_errors_limit-js.processed__",
#     srcs  = [
#         ":tail_errors_limit-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :tail_errors_limit-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "tail_errors_limit-js.processed.diff_test",
#     file1  = ":tail_errors_limit-js.processed",
#     file2  = ":tail_errors_limit-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "tail_errors_unlimited.actual"
#     ],
#     name  = "__tail_errors_unlimited.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:tail_errors_unlimited.exe)",

#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:tail_errors_unlimited.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "tail_errors_unlimited.processed"
#     ],
#     name  = "__tail_errors_unlimited.processed__",
#     srcs  = [
#         ":tail_errors_unlimited.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :tail_errors_unlimited.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "tail_errors_unlimited.processed.diff_test",
#     file1  = ":tail_errors_unlimited.processed",
#     file2  = ":tail_errors_unlimited.expected"
# )

# ##############
# js_run_binary(
#     name  = "__tail_errors_unlimited-js.actual__",
#     tool  = ":tail_errors_unlimited.bc.js",
#     stdout  = "tail_errors_unlimited-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "tail_errors_unlimited-js.processed"
#     ],
#     name  = "__tail_errors_unlimited-js.processed__",
#     srcs  = [
#         ":tail_errors_unlimited-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :tail_errors_unlimited-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "tail_errors_unlimited-js.processed.diff_test",
#     file1  = ":tail_errors_unlimited-js.processed",
#     file2  = ":tail_errors_unlimited-js.expected"
# )

# ########
# genrule(
#     outs  = [
#         "unknown_option.actual"
#     ],
#     name  = "__unknown_option.actual__",
#     cmd   = " ".join([
#         "$(execpath //test/e2e/alcotest/failing:unknown_option.exe)",
#         "--dry-runn",
#         "> $@"
#         "> $@"
#     ]),
#     exec_tools = [
#         "//test/e2e/alcotest/failing:unknown_option.exe"
#     ]
# )

# ########
# genrule(
#     outs  = [
#         "unknown_option.processed"
#     ],
#     name  = "__unknown_option.processed__",
#     srcs  = [
#         ":unknown_option.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :unknown_option.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "unknown_option.processed.diff_test",
#     file1  = ":unknown_option.processed",
#     file2  = ":unknown_option.expected"
# )

# ##############
# js_run_binary(
#     name  = "__unknown_option-js.actual__",
#     tool  = ":unknown_option.bc.js",
#     stdout  = "unknown_option-js.actual"
# )

# ########
# genrule(
#     outs  = [
#         "unknown_option-js.processed"
#     ],
#     name  = "__unknown_option-js.processed__",
#     srcs  = [
#         ":unknown_option-js.actual"
#     ],
#     cmd   = " ".join([
#         "$(execpath //../..:strip_randomness.exe)",
#         "$(location :unknown_option-js.actual)",
#         "> $@"
#     ]),
#     exec_tools = [
#         "//../..:strip_randomness.exe"
#     ]
# )

# ##########
# diff_test(
#     name  = "unknown_option-js.processed.diff_test",
#     file1  = ":unknown_option-js.processed",
#     file2  = ":unknown_option-js.expected"
# )

# ##########
# diff_test(
#     name  = "dune.gen.diff_test",
#     file1  = ":dune.gen",
#     file2  = ":dune.inc"
# )

